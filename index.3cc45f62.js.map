{"mappings":"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","sources":["src/js/search.js"],"sourcesContent":["import MovieDbApi from './api';\nimport renderSearch from './renderSearch';\nimport renderMovieDetails from './renderMovieDetails';\nimport renderPagination from './renderPagination';\nimport { CONTENT_KEYS } from './config';\nimport { DETAILS_OPTION } from './config';\n\nlet searchButton = document.getElementById('search-button');\n// async call for API\n\n\n//  capture the search texts\n//  call search API with search texts\n//  render the  results in the page\nsearchButton.onclick = async function (e) {\n    e.preventDefault();\n    const searchField = document.getElementById('search-input');\n    await renderSearch.render({text: searchField.value,page:1});\n    setupMovieCardOnClick();\n    // document.getElementById('pagination').innerHTML = '';\n    \n}\n\nfunction setupMovieCardOnClick() {\n    const movieCardLinks = document.getElementsByClassName(\"movie-card\");\n    for (const movieCardLink of movieCardLinks) {\n      movieCardLink.onclick = async function (ev) {\n        const movieId = ev.currentTarget.getAttribute(\"data-movie-id\");\n        //  call movie api to get details of movieId\n        const response = await MovieDbApi.getMovieDetails(movieId);\n        // console.log(response);\n        //  pass the response of the movie details api to RenderMovieDetails\n        renderMovieDetails.render(response.data);\n\n        let addToWatchedBtn = document.getElementById('add-to-watched-btn');\n      let addToQueueBtn = document.getElementById('add-to-q-btn');\n\n      let watchedMoviesText = localStorage.getItem(\"watchedMovies\");\n      let watchedMovies = [];\n        if (watchedMoviesText) {\n          watchedMovies = JSON.parse(watchedMoviesText);\n        }\n\n        addToWatchedBtn.textContent = `${DETAILS_OPTION.default} TO WATCHED`;\n\n        for (const {id} of watchedMovies) {\n          // console.log(parseInt(movieId));\n          if(id === parseInt(movieId)){\n            addToWatchedBtn.classList.add('active');\n            addToWatchedBtn.textContent = `${DETAILS_OPTION.remove} FROM WATCHED LIST`;\n          }\n        }\n\n\n      let queuedMoviesText = localStorage.getItem(\"queuedMovies\");\n\n      let queuedMovies = [];\n        if (queuedMoviesText) {\n          queuedMovies = JSON.parse(queuedMoviesText);\n        }\n\n        addToQueueBtn.textContent = `${DETAILS_OPTION.default} TO QUEUED`;\n\n        for (const {id} of queuedMovies) {\n          // console.log(parseInt(movieId));\n          if(id === parseInt(movieId)){\n            addToQueueBtn.classList.add('active');\n            addToQueueBtn.textContent = `${DETAILS_OPTION.remove} FROM QUEUED LIST`;\n          }\n        }\n     \n\n      addToWatchedBtn.onclick = function (e) {\n\n        // get item if it exists in localStorage\n\n        let movieInfo = {\n          id: response.data.id,\n          poster_path: response.data.poster_path,\n          original_title: response.data.original_title,\n          vote_average: response.data.vote_average,\n          genre_ids: response.data.genres.map(g => g.id),\n          release_date: response.data.release_date\n\n        }\n\n        let index = 0;\n        for(const {id} of watchedMovies){\n          if(id === movieInfo.id){\n            watchedMovies.splice(index);\n            localStorage.setItem('watchedMovies', JSON.stringify(watchedMovies));\n            return;\n          }\n          index++;\n        }\n\n        watchedMovies.push(movieInfo);\n        e.currentTarget.textContent = `${DETAILS_OPTION.remove} TO QUEUED`;\n        localStorage.setItem('watchedMovies', JSON.stringify(watchedMovies));\n        // console.log(watchedMovies);\n      }\n\n\n\n      addToQueueBtn.onclick = function (e) {\n\n        let movieInfo = {\n          id: response.data.id,\n          poster_path: response.data.poster_path,\n          original_title: response.data.original_title,\n          vote_average: response.data.vote_average,\n          genre_ids: response.data.genres.map(g => g.id),\n          release_date: response.data.release_date\n\n        }\n\n        let index = 0;\n        for(const {id} of queuedMovies){\n          if(id === movieInfo.id){\n            queuedMovies.splice(index);\n            localStorage.setItem('queuedMovies', JSON.stringify(queuedMovies));\n            return;\n          }\n          index++;\n        }\n\n\n        queuedMovies.push(movieInfo);\n        localStorage.setItem('queuedMovies', JSON.stringify(queuedMovies));\n      }\n    };\n  }\n}\n\n\n\n"],"names":["$bpxeT","parcelRequire","$d35904b1c7f1c41e$var$setupMovieCardOnClick","movieCardLinks","document","getElementsByClassName","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","value","onclick","$parcel$interopDefault","$2TvXO","mark","_callee","ev","movieId","response","addToWatchedBtn","addToQueueBtn","watchedMoviesText","watchedMovies","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator4","_step4","queuedMoviesText","queuedMovies","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_iterator1","_step1","currentTarget","getAttribute","$b7ONl","default","getMovieDetails","_ctx","sent","$eWHaw","render","data","getElementById","localStorage","getItem","JSON","parse","textContent","concat","$ebqVR","DETAILS_OPTION","id","parseInt","classList","add","remove","t0","return","t1","e","movieInfo","poster_path","original_title","vote_average","genre_ids","genres","map","g","release_date","index","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","splice","setItem","stringify","err","push","searchField","preventDefault","$5FdRf","text","page"],"version":3,"file":"index.3cc45f62.js.map"}